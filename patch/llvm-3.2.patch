diff -ruN old/include/llvm/CodeGen/MachineFunction.h new/include/llvm/CodeGen/MachineFunction.h
--- old/include/llvm/CodeGen/MachineFunction.h	2012-09-17 14:59:23.000000000 +0800
+++ new/include/llvm/CodeGen/MachineFunction.h	2013-04-17 00:06:36.599216553 +0800
@@ -20,6 +20,7 @@
 
 #include "llvm/CodeGen/MachineBasicBlock.h"
 #include "llvm/ADT/ilist.h"
+#include "llvm/ADT/DenseMap.h"
 #include "llvm/Support/DebugLoc.h"
 #include "llvm/Support/Allocator.h"
 #include "llvm/Support/Recycler.h"
@@ -71,6 +72,12 @@
   virtual ~MachineFunctionInfo();
 };
 
+class EmittedCodeInfo {
+  public:
+    DenseMap<uintptr_t, uintptr_t> ConstantPoolEntry;
+    DenseMap<uintptr_t, const char *> ExternalSymbol;
+};
+
 class MachineFunction {
   const Function *Fn;
   const TargetMachine &Target;
@@ -139,6 +146,9 @@
   GCModuleInfo *getGMI() const { return GMI; }
   MCContext &getContext() const { return Ctx; }
 
+  /// Keep track of constant pools and external symbols for relocation.
+  EmittedCodeInfo ECInfo;
+
   /// getFunction - Return the LLVM function that this machine code represents
   ///
   const Function *getFunction() const { return Fn; }
diff -ruN old/include/llvm/Target/TargetRegisterInfo.h new/include/llvm/Target/TargetRegisterInfo.h
--- old/include/llvm/Target/TargetRegisterInfo.h	2012-11-01 08:32:10.000000000 +0800
+++ new/include/llvm/Target/TargetRegisterInfo.h	2013-04-17 00:06:36.599216553 +0800
@@ -235,6 +235,8 @@
   virtual ~TargetRegisterInfo();
 public:
 
+  std::vector<unsigned> ExtraReservedRegs;
+
   // Register numbers can represent physical registers, virtual registers, and
   // sometimes stack slots. The unsigned values are divided into these ranges:
   //
@@ -439,6 +441,13 @@
   /// used by register scavenger to determine what registers are free.
   virtual BitVector getReservedRegs(const MachineFunction &MF) const = 0;
 
+  /// getExtraReservedRegs - Add extra reserved registers to the reserved list.
+  virtual void getExtraReservedRegs(BitVector &Reserved,
+                  bool reset = true) const {}
+
+  virtual bool setExtraReservedRegs(std::string RegName) { return true; }
+  virtual void resetExtraReservedRegs() { ExtraReservedRegs.clear(); }
+
   /// getMatchingSuperReg - Return a super-register of the specified register
   /// Reg so its sub-register of index SubIdx is Reg.
   unsigned getMatchingSuperReg(unsigned Reg, unsigned SubIdx,
diff -ruN old/lib/CodeGen/SelectionDAG/DAGCombiner.cpp new/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
--- old/lib/CodeGen/SelectionDAG/DAGCombiner.cpp	2012-11-27 01:01:12.000000000 +0800
+++ new/lib/CodeGen/SelectionDAG/DAGCombiner.cpp	2013-04-17 00:06:36.604216752 +0800
@@ -52,6 +52,10 @@
     CombinerGlobalAA("combiner-global-alias-analysis", cl::Hidden,
                cl::desc("Include global information in alias analysis"));
 
+  static cl::opt<bool>
+    DisablePrePostIndex("disable-prepost-index", cl::Hidden,
+               cl::desc("Disable pre/post indexed load and store"));
+
 //------------------------------ DAGCombiner ---------------------------------//
 
   class DAGCombiner {
@@ -6802,6 +6806,8 @@
 /// the add / subtract in and all of its other uses are redirected to the
 /// new load / store.
 bool DAGCombiner::CombineToPreIndexedLoadStore(SDNode *N) {
+  if (DisablePrePostIndex)
+    return false;
   if (Level < AfterLegalizeDAG)
     return false;
 
@@ -6929,6 +6935,8 @@
 /// load / store effectively and all of its uses are redirected to the
 /// new load / store.
 bool DAGCombiner::CombineToPostIndexedLoadStore(SDNode *N) {
+  if (DisablePrePostIndex)
+    return false;
   if (Level < AfterLegalizeDAG)
     return false;
 
diff -ruN old/lib/CodeGen/SelectionDAG/TargetLowering.cpp new/lib/CodeGen/SelectionDAG/TargetLowering.cpp
--- old/lib/CodeGen/SelectionDAG/TargetLowering.cpp	2012-11-02 07:49:58.000000000 +0800
+++ new/lib/CodeGen/SelectionDAG/TargetLowering.cpp	2013-04-17 00:06:36.607216842 +0800
@@ -2307,6 +2307,8 @@
         N0.getOpcode() == ISD::AND)
       if (ConstantSDNode *AndRHS =
                   dyn_cast<ConstantSDNode>(N0.getOperand(1))) {
+        return SDValue();
+#if 0
         EVT ShiftTy = DCI.isBeforeLegalizeOps() ?
           getPointerTy() : getShiftAmountTy(N0.getValueType());
         if (Cond == ISD::SETNE && C1 == 0) {// (X & 8) != 0  -->  (X & 8) >> 3
@@ -2325,6 +2327,7 @@
                                       DAG.getConstant(C1.logBase2(), ShiftTy)));
           }
         }
+#endif
       }
 
     if (C1.getMinSignedBits() <= 64 &&
diff -ruN old/lib/Target/ARM/ARMBaseInstrInfo.cpp new/lib/Target/ARM/ARMBaseInstrInfo.cpp
--- old/lib/Target/ARM/ARMBaseInstrInfo.cpp	2012-10-27 05:29:15.000000000 +0800
+++ new/lib/Target/ARM/ARMBaseInstrInfo.cpp	2013-04-17 00:06:36.609216892 +0800
@@ -2240,9 +2240,8 @@
     }
 
     // Toggle the optional operand to CPSR.
-    MI->getOperand(5).setReg(ARM::CPSR);
-    MI->getOperand(5).setIsDef(true);
     assert(!isPredicated(MI) && "Can't use flags from predicated instruction");
+    MI->addOperand(MachineOperand::CreateReg(ARM::CPSR, true, true));
     CmpInstr->eraseFromParent();
 
     // Modify the condition code of operands in OperandsToUpdate.
diff -ruN old/lib/Target/ARM/ARMBaseRegisterInfo.cpp new/lib/Target/ARM/ARMBaseRegisterInfo.cpp
--- old/lib/Target/ARM/ARMBaseRegisterInfo.cpp	2012-11-07 07:05:24.000000000 +0800
+++ new/lib/Target/ARM/ARMBaseRegisterInfo.cpp	2013-04-17 00:06:36.610216916 +0800
@@ -116,9 +116,47 @@
     for (MCSubRegIterator SI(*I, this); SI.isValid(); ++SI)
       if (Reserved.test(*SI)) Reserved.set(*I);
 
+  getExtraReservedRegs(Reserved, false);
   return Reserved;
 }
 
+void ARMBaseRegisterInfo::getExtraReservedRegs(BitVector &Reserved,
+                bool reset) const {
+  if (reset == true)
+    Reserved = BitVector(getNumRegs());
+  for (int i = 0, e = ExtraReservedRegs.size(); i < e; i++)
+    Reserved.set(ExtraReservedRegs[i]);
+}
+	
+bool ARMBaseRegisterInfo::setExtraReservedRegs(std::string RegName) {
+#define RESERVE(x) \
+  do { \
+    ExtraReservedRegs.push_back(ARM::R ## x); \
+    return true; \
+  } while(0)
+
+  if (RegName == "r0")  RESERVE(0);
+  if (RegName == "r1")  RESERVE(1);
+  if (RegName == "r2")  RESERVE(2);
+  if (RegName == "r3")  RESERVE(3);
+  if (RegName == "r4")  RESERVE(4);
+  if (RegName == "r5")  RESERVE(5);
+  if (RegName == "r6")  RESERVE(6);
+  if (RegName == "r7")  RESERVE(7);
+  if (RegName == "r8")  RESERVE(8);
+  if (RegName == "r9")  RESERVE(9);
+  if (RegName == "r10") RESERVE(10);
+  if (RegName == "r11") RESERVE(11);
+  if (RegName == "r12") RESERVE(12);
+  return false;
+
+#undef RESERVE
+}
+			
+void ARMBaseRegisterInfo::resetExtraReservedRegs() {
+  ExtraReservedRegs.clear();
+}
+
 const TargetRegisterClass*
 ARMBaseRegisterInfo::getLargestLegalSuperClass(const TargetRegisterClass *RC)
                                                                          const {
diff -ruN old/lib/Target/ARM/ARMBaseRegisterInfo.h new/lib/Target/ARM/ARMBaseRegisterInfo.h
--- old/lib/Target/ARM/ARMBaseRegisterInfo.h	2012-11-07 07:05:24.000000000 +0800
+++ new/lib/Target/ARM/ARMBaseRegisterInfo.h	2013-04-17 00:06:36.610216916 +0800
@@ -100,6 +100,10 @@
 
   BitVector getReservedRegs(const MachineFunction &MF) const;
 
+  void getExtraReservedRegs(BitVector &Reserved, bool reset = true) const;
+  bool setExtraReservedRegs(std::string RegName);
+  void resetExtraReservedRegs();
+
   const TargetRegisterClass*
   getPointerRegClass(const MachineFunction &MF, unsigned Kind = 0) const;
   const TargetRegisterClass*
diff -ruN old/lib/Target/ARM/ARMCodeEmitter.cpp new/lib/Target/ARM/ARMCodeEmitter.cpp
--- old/lib/Target/ARM/ARMCodeEmitter.cpp	2012-10-09 00:38:25.000000000 +0800
+++ new/lib/Target/ARM/ARMCodeEmitter.cpp	2013-04-17 00:06:36.611216937 +0800
@@ -56,6 +56,7 @@
     const std::vector<MachineJumpTableEntry> *MJTEs;
     bool IsPIC;
     bool IsThumb;
+    EmittedCodeInfo *ECInfo;
 
     void getAnalysisUsage(AnalysisUsage &AU) const {
       AU.addRequired<MachineModuleInfo>();
@@ -386,6 +387,7 @@
   JTI->Initialize(MF, IsPIC);
   MMI = &getAnalysis<MachineModuleInfo>();
   MCE.setModuleInfo(MMI);
+  ECInfo = &MF.ECInfo;
 
   do {
     DEBUG(errs() << "JITTing function '"
@@ -489,7 +491,7 @@
 void ARMCodeEmitter::
 emitExternalSymbolAddress(const char *ES, unsigned Reloc) const {
   MCE.addRelocation(MachineRelocation::getExtSym(MCE.getCurrentPCOffset(),
-                                                 Reloc, ES));
+                                                 Reloc, ES, 0, 0, false));
 }
 
 /// emitConstPoolAddress - Arrange for the address of an constant pool
@@ -645,12 +647,16 @@
     if (GV) {
       Reloc::Model RelocM = TM.getRelocationModel();
       emitGlobalAddress(GV, ARM::reloc_arm_machine_cp_entry,
+#if 0
                         isa<Function>(GV),
+#endif
+                        false,
                         Subtarget->GVIsIndirectSymbol(GV, RelocM),
                         (intptr_t)ACPV);
     } else  {
       const char *Sym = cast<ARMConstantPoolSymbol>(ACPV)->getSymbol();
       emitExternalSymbolAddress(Sym, ARM::reloc_arm_absolute);
+      ECInfo->ExternalSymbol[MCE.getCurrentPCOffset()] = Sym;
     }
     emitWordLE(0);
   } else {
@@ -1031,7 +1037,7 @@
       Binary |= ((Lo16 >> 12) & 0xF) << 16;
       emitWordLE(Binary);
       return;
-  } else if(MCID.Opcode == ARM::MOVTi16) {
+  } else if(MCID.Opcode == ARM::MOVTi16 && MI.getOperand(OpIdx).isReg() == false) {
       unsigned Hi16 = (getMovi32Value(MI, MI.getOperand(OpIdx),
                        ARM::reloc_arm_movt) >> 16);
       Binary |= Hi16 & 0xFFF;
@@ -1109,7 +1115,8 @@
 
   // If this is an LDRi12, STRi12 or LDRcp, nothing more needs be done.
   if (MI.getOpcode() == ARM::LDRi12 || MI.getOpcode() == ARM::LDRcp ||
-      MI.getOpcode() == ARM::STRi12) {
+      MI.getOpcode() == ARM::STRi12 || MI.getOpcode() == ARM::LDRBi12 ||
+      MI.getOpcode() == ARM::STRBi12) {
     emitWordLE(Binary);
     return;
   }
diff -ruN old/lib/Target/ARM/ARMJITInfo.cpp new/lib/Target/ARM/ARMJITInfo.cpp
--- old/lib/Target/ARM/ARMJITInfo.cpp	2012-09-06 06:26:57.000000000 +0800
+++ new/lib/Target/ARM/ARMJITInfo.cpp	2013-04-17 00:06:36.612216952 +0800
@@ -255,6 +255,8 @@
     assert((!ACPV->hasModifier() && !ACPV->mustAddCurrentAddress()) &&
            "Can't handle this machine constant pool entry yet!");
     intptr_t Addr = (intptr_t)(MR->getResultPointer());
+    if (ACPV->isGlobalValue() && isa<Function>(cast<ARMConstantPoolConstant>(ACPV)->getGV()))
+      return Addr;
     Addr -= getPCLabelAddr(ACPV->getLabelId()) + ACPV->getPCAdjustment();
     return Addr;
   }
diff -ruN old/lib/Target/ARM/ARMTargetMachine.cpp new/lib/Target/ARM/ARMTargetMachine.cpp
--- old/lib/Target/ARM/ARMTargetMachine.cpp	2012-10-29 05:34:43.000000000 +0800
+++ new/lib/Target/ARM/ARMTargetMachine.cpp	2013-04-17 00:06:36.612216952 +0800
@@ -28,6 +28,10 @@
                   cl::desc("Enable global merge pass"),
                   cl::init(true));
 
+static cl::opt<bool>
+DisableExpandPseudo("disable-expand-pseudo", cl::Hidden,
+                    cl::desc("Disable expanding pseudo instructions"));
+
 extern "C" void LLVMInitializeARMTarget() {
   // Register the target.
   RegisterTargetMachine<ARMTargetMachine> X(TheARMTarget);
@@ -173,7 +177,8 @@
 
   // Expand some pseudo instructions into multiple instructions to allow
   // proper scheduling.
-  addPass(createARMExpandPseudoPass());
+  if (!DisableExpandPseudo)
+    addPass(createARMExpandPseudoPass());
 
   if (getOptLevel() != CodeGenOpt::None) {
     if (!getARMSubtarget().isThumb1Only())
diff -ruN old/lib/Target/PowerPC/PPCRegisterInfo.cpp new/lib/Target/PowerPC/PPCRegisterInfo.cpp
--- old/lib/Target/PowerPC/PPCRegisterInfo.cpp	2012-11-01 17:14:31.000000000 +0800
+++ new/lib/Target/PowerPC/PPCRegisterInfo.cpp	2013-04-17 00:06:36.613216979 +0800
@@ -178,9 +178,67 @@
   if (PPCFI->needsFP(MF))
     Reserved.set(PPC::R31);
 
+  getExtraReservedRegs(Reserved, false);
   return Reserved;
 }
 
+void PPCRegisterInfo::getExtraReservedRegs(BitVector &Reserved,
+                bool reset) const {
+  if (reset == true)
+    Reserved = BitVector(getNumRegs());
+  for (int i = 0, e = ExtraReservedRegs.size(); i < e; i++)
+    Reserved.set(ExtraReservedRegs[i]);
+}
+
+bool PPCRegisterInfo::setExtraReservedRegs(std::string RegName) {
+#define RESERVE(x) \
+  do { \
+    ExtraReservedRegs.push_back(PPC::R ## x); \
+    ExtraReservedRegs.push_back(PPC::X ## x); \
+    return true; \
+  } while(0)
+
+  if (RegName == "r0") RESERVE(0);
+  if (RegName == "r1") RESERVE(1);
+  if (RegName == "r2") RESERVE(2);
+  if (RegName == "r3") RESERVE(3);
+  if (RegName == "r4") RESERVE(4);
+  if (RegName == "r5") RESERVE(5);
+  if (RegName == "r6") RESERVE(6);
+  if (RegName == "r7") RESERVE(7);
+  if (RegName == "r8") RESERVE(8);
+  if (RegName == "r9") RESERVE(9);
+  if (RegName == "r10") RESERVE(10);
+  if (RegName == "r11") RESERVE(11);
+  if (RegName == "r12") RESERVE(12);
+  if (RegName == "r13") RESERVE(13);
+  if (RegName == "r14") RESERVE(14);
+  if (RegName == "r15") RESERVE(15);
+  if (RegName == "r16") RESERVE(16);
+  if (RegName == "r17") RESERVE(17);
+  if (RegName == "r18") RESERVE(18);
+  if (RegName == "r19") RESERVE(19);
+  if (RegName == "r20") RESERVE(20);
+  if (RegName == "r21") RESERVE(21);
+  if (RegName == "r22") RESERVE(22);
+  if (RegName == "r23") RESERVE(23);
+  if (RegName == "r24") RESERVE(24);
+  if (RegName == "r25") RESERVE(25);
+  if (RegName == "r26") RESERVE(26);
+  if (RegName == "r27") RESERVE(27);
+  if (RegName == "r28") RESERVE(28);
+  if (RegName == "r29") RESERVE(29);
+  if (RegName == "r30") RESERVE(30);
+  if (RegName == "r31") RESERVE(31);
+  return false;
+
+#undef RESERVE
+}
+
+void PPCRegisterInfo::resetExtraReservedRegs() {
+  ExtraReservedRegs.clear();
+}
+
 unsigned
 PPCRegisterInfo::getRegPressureLimit(const TargetRegisterClass *RC,
                                          MachineFunction &MF) const {
diff -ruN old/lib/Target/PowerPC/PPCRegisterInfo.h new/lib/Target/PowerPC/PPCRegisterInfo.h
--- old/lib/Target/PowerPC/PPCRegisterInfo.h	2012-09-17 02:10:23.000000000 +0800
+++ new/lib/Target/PowerPC/PPCRegisterInfo.h	2013-04-17 00:06:36.613216979 +0800
@@ -48,6 +48,10 @@
 
   BitVector getReservedRegs(const MachineFunction &MF) const;
 
+  void getExtraReservedRegs(BitVector &Reserved, bool reset = true) const;
+  bool setExtraReservedRegs(std::string RegName);
+  void resetExtraReservedRegs();
+
   virtual bool avoidWriteAfterWrite(const TargetRegisterClass *RC) const;
 
   /// requiresRegisterScavenging - We require a register scavenger.
diff -ruN old/lib/Target/X86/X86CodeEmitter.cpp new/lib/Target/X86/X86CodeEmitter.cpp
--- old/lib/Target/X86/X86CodeEmitter.cpp	2012-10-09 00:38:25.000000000 +0800
+++ new/lib/Target/X86/X86CodeEmitter.cpp	2013-04-17 00:07:14.062218563 +0800
@@ -49,6 +49,7 @@
     intptr_t PICBaseOffset;
     bool Is64BitMode;
     bool IsPIC;
+    EmittedCodeInfo *ECInfo;
   public:
     static char ID;
     explicit Emitter(X86TargetMachine &tm, CodeEmitter &mce)
@@ -139,6 +140,7 @@
   TD = TM.getDataLayout();
   Is64BitMode = TM.getSubtarget<X86Subtarget>().is64Bit();
   IsPIC = TM.getRelocationModel() == Reloc::PIC_;
+  ECInfo = &MF.ECInfo;
 
   do {
     DEBUG(dbgs() << "JITTing function '" << MF.getName() << "'\n");
@@ -1119,6 +1121,17 @@
   MCE.processDebugLoc(MI.getDebugLoc(), true);
 
   unsigned Opcode = Desc->Opcode;
+  uintptr_t CurrentPC = MCE.getCurrentPCValue();
+
+  // Emit four ud2 for HQEMU.
+  if (Opcode == X86::TRAP) {
+    for (unsigned i = 0; i < 4; i++) {
+      MCE.emitByte(0x0F);
+      MCE.emitByte(0x0B);
+    }
+    MCE.processDebugLoc(MI.getDebugLoc(), false);
+    return;
+  }
 
   // If this is a two-address instruction, skip one of the register operands.
   unsigned NumOps = Desc->getNumOperands();
@@ -1270,8 +1283,11 @@
                         Indirect);
     } else if (MO1.isSymbol())
       emitExternalSymbolAddress(MO1.getSymbolName(), rt);
-    else if (MO1.isCPI())
+    else if (MO1.isCPI()) {
       emitConstPoolAddress(MO1.getIndex(), rt);
+      ECInfo->ConstantPoolEntry[CurrentPC] =
+              MCE.getConstantPoolEntryAddress(MO1.getIndex());
+    }
     else if (MO1.isJTI())
       emitJumpTableAddress(MO1.getIndex(), rt);
     break;
diff -ruN old/lib/Target/X86/X86RegisterInfo.cpp new/lib/Target/X86/X86RegisterInfo.cpp
--- old/lib/Target/X86/X86RegisterInfo.cpp	2012-10-24 22:46:16.000000000 +0800
+++ new/lib/Target/X86/X86RegisterInfo.cpp	2013-04-17 00:06:36.615217041 +0800
@@ -365,9 +365,66 @@
     }
   }
 
+  getExtraReservedRegs(Reserved, false);
   return Reserved;
 }
 
+void X86RegisterInfo::getExtraReservedRegs(BitVector &Reserved,
+                bool reset) const {
+  if (reset == true)
+    Reserved = BitVector(getNumRegs());
+  for (int i = 0, e = ExtraReservedRegs.size(); i < e; i++)
+    Reserved.set(ExtraReservedRegs[i]);
+}
+
+bool X86RegisterInfo::setExtraReservedRegs(std::string RegName) {
+#define RESERVE1(x) \
+  do { \
+    ExtraReservedRegs.push_back(X86::x ## L); \
+    ExtraReservedRegs.push_back(X86::x ## H); \
+    ExtraReservedRegs.push_back(X86::x ## X);\
+    ExtraReservedRegs.push_back(X86::E ## x ## X);\
+    ExtraReservedRegs.push_back(X86::R ## x ## X);\
+    return true; \
+  } while(0)
+
+#define RESERVE2(x) \
+  do { \
+    ExtraReservedRegs.push_back(X86::R ## x); \
+    ExtraReservedRegs.push_back(X86::R ## x ## B);\
+    ExtraReservedRegs.push_back(X86::R ## x ## D);\
+    ExtraReservedRegs.push_back(X86::R ## x ## W);\
+    return true; \
+  } while(0)
+
+  if (RegName == "ebp") {
+    ExtraReservedRegs.push_back(X86::EBP);
+    return true;
+  }
+#if defined(__x86_64__)
+  if (RegName == "rax") RESERVE1(A);
+  if (RegName == "rbx") RESERVE1(B);
+  if (RegName == "rcx") RESERVE1(C);
+  if (RegName == "rdx") RESERVE1(D);
+  if (RegName == "r8")  RESERVE2(8);
+  if (RegName == "r9")  RESERVE2(9);
+  if (RegName == "r10") RESERVE2(10);
+  if (RegName == "r11") RESERVE2(11);
+  if (RegName == "r12") RESERVE2(12);
+  if (RegName == "r13") RESERVE2(13);
+  if (RegName == "r14") RESERVE2(14);
+  if (RegName == "r15") RESERVE2(15);
+#endif
+  return false;
+
+#undef RESERVE1
+#undef RESERVE2
+}
+
+void X86RegisterInfo::resetExtraReservedRegs() {
+  ExtraReservedRegs.clear();
+}
+
 //===----------------------------------------------------------------------===//
 // Stack Frame Processing methods
 //===----------------------------------------------------------------------===//
diff -ruN old/lib/Target/X86/X86RegisterInfo.h new/lib/Target/X86/X86RegisterInfo.h
--- old/lib/Target/X86/X86RegisterInfo.h	2012-10-16 06:39:43.000000000 +0800
+++ new/lib/Target/X86/X86RegisterInfo.h	2013-04-17 00:06:36.615217041 +0800
@@ -108,6 +108,10 @@
   /// register scavenger to determine what registers are free.
   BitVector getReservedRegs(const MachineFunction &MF) const;
 
+  void getExtraReservedRegs(BitVector &Reserved, bool reset = true) const;
+  bool setExtraReservedRegs(std::string RegName);
+  void resetExtraReservedRegs();
+
   bool hasBasePointer(const MachineFunction &MF) const;
 
   bool canRealignStack(const MachineFunction &MF) const;
diff -ruN old/lib/Transforms/InstCombine/InstCombineCasts.cpp new/lib/Transforms/InstCombine/InstCombineCasts.cpp
--- old/lib/Transforms/InstCombine/InstCombineCasts.cpp	2012-11-01 17:14:31.000000000 +0800
+++ new/lib/Transforms/InstCombine/InstCombineCasts.cpp	2013-04-17 00:06:36.616217070 +0800
@@ -16,9 +16,13 @@
 #include "llvm/DataLayout.h"
 #include "llvm/Target/TargetLibraryInfo.h"
 #include "llvm/Support/PatternMatch.h"
+#include "llvm/Support/CommandLine.h"
 using namespace llvm;
 using namespace PatternMatch;
 
+static cl::opt<bool> DisableBCVector("disable-bc-vector", cl::Hidden,
+    cl::desc("Disable bitcast to/from VectorType"));
+
 /// DecomposeSimpleLinearExpr - Analyze 'Val', seeing if it is a simple linear
 /// expression.  If so, decompose it, returning some value X, such that Val is
 /// X*Scale+Offset.
@@ -1693,6 +1697,12 @@
     if (Instruction *I = OptimizeIntToFloatBitCast(CI, *this))
       return I;
 
+  if (DisableBCVector == true) {
+    if (SrcTy->isPointerTy())
+      return commonPointerCastTransforms(CI);
+    return commonCastTransforms(CI);
+  }
+
   if (VectorType *DestVTy = dyn_cast<VectorType>(DestTy)) {
     if (DestVTy->getNumElements() == 1 && !SrcTy->isVectorTy()) {
       Value *Elem = Builder->CreateBitCast(Src, DestVTy->getElementType());
