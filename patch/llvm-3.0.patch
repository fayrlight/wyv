diff -ruN old/include/llvm/CodeGen/MachineFunction.h new/include/llvm/CodeGen/MachineFunction.h
--- old/include/llvm/CodeGen/MachineFunction.h	2011-06-29 03:10:37.000000000 +0800
+++ new/include/llvm/CodeGen/MachineFunction.h	2013-04-16 22:40:44.851214293 +0800
@@ -20,6 +20,7 @@
 
 #include "llvm/CodeGen/MachineBasicBlock.h"
 #include "llvm/ADT/ilist.h"
+#include "llvm/ADT/DenseMap.h"
 #include "llvm/Support/DebugLoc.h"
 #include "llvm/Support/Allocator.h"
 #include "llvm/Support/Recycler.h"
@@ -71,6 +72,12 @@
   virtual ~MachineFunctionInfo();
 };
 
+class EmittedCodeInfo {
+public:
+  DenseMap<uintptr_t, uintptr_t> ConstantPoolEntry;
+  DenseMap<uintptr_t, const char *> ExternalSymbol;
+};
+
 class MachineFunction {
   const Function *Fn;
   const TargetMachine &Target;
@@ -136,6 +143,9 @@
   MachineModuleInfo &getMMI() const { return MMI; }
   GCModuleInfo *getGMI() const { return GMI; }
   MCContext &getContext() const { return Ctx; }
+
+  /// Keep track of constant pools and external symbols for relocation.
+  EmittedCodeInfo ECInfo;
   
   /// getFunction - Return the LLVM function that this machine code represents
   ///
diff -ruN old/include/llvm/Target/TargetRegisterInfo.h new/include/llvm/Target/TargetRegisterInfo.h
--- old/include/llvm/Target/TargetRegisterInfo.h	2011-10-06 08:08:27.000000000 +0800
+++ new/include/llvm/Target/TargetRegisterInfo.h	2013-04-16 22:40:44.852214330 +0800
@@ -231,6 +231,8 @@
   virtual ~TargetRegisterInfo();
 public:
 
+  std::vector<unsigned> ExtraReservedRegs;
+
   // Register numbers can represent physical registers, virtual registers, and
   // sometimes stack slots. The unsigned values are divided into these ranges:
   //
@@ -367,6 +369,13 @@
   /// used by register scavenger to determine what registers are free.
   virtual BitVector getReservedRegs(const MachineFunction &MF) const = 0;
 
+  /// getExtraReservedRegs - Add extra reserved registers to the reserved list.
+  virtual void getExtraReservedRegs(BitVector &Reserved,
+                   bool reset = true) const {}
+
+  virtual bool setExtraReservedRegs(std::string RegName) { return true; }
+  virtual void resetExtraReservedRegs() { ExtraReservedRegs.clear(); }
+
   /// getSubReg - Returns the physical register number of sub-register "Index"
   /// for physical register RegNo. Return zero if the sub-register does not
   /// exist.
diff -ruN old/lib/CodeGen/RegAllocLinearScan.cpp new/lib/CodeGen/RegAllocLinearScan.cpp
--- old/lib/CodeGen/RegAllocLinearScan.cpp	2011-08-09 08:29:53.000000000 +0800
+++ new/lib/CodeGen/RegAllocLinearScan.cpp	2013-04-16 22:40:44.853214365 +0800
@@ -140,6 +140,8 @@
     const TargetInstrInfo* tii_;
     BitVector allocatableRegs_;
     BitVector reservedRegs_;
+    BitVector extraReservedRegs_;
+    DenseMap<LiveInterval*, unsigned> moveReservedRegs_;
     LiveIntervals* li_;
     MachineLoopInfo *loopInfo;
     RegisterClassInfo RegClassInfo;
@@ -193,6 +195,8 @@
       }
     }
 
+    void moveReservedRegs();
+
   public:
     virtual const char* getPassName() const {
       return "Linear Scan Register Allocator";
@@ -332,7 +336,7 @@
     bool isRegAvail(unsigned physReg) const {
       assert(TargetRegisterInfo::isPhysicalRegister(physReg) &&
              "should be physical register!");
-      return regUse_[physReg] == 0;
+      return regUse_[physReg] == 0 && reservedRegs_.test(physReg) == false;
     }
 
     void backUpRegUses() {
@@ -503,6 +507,13 @@
   return CandReg;
 }
 
+void RALinScan::moveReservedRegs() {
+  for (DenseMap<LiveInterval*,unsigned>::iterator
+                  I = moveReservedRegs_.begin(), E = moveReservedRegs_.end();
+                  I != E; I++)
+    vrm_->assignVirt2Phys(I->first->reg, I->second);
+}
+
 bool RALinScan::runOnMachineFunction(MachineFunction &fn) {
   mf_ = &fn;
   mri_ = &fn.getRegInfo();
@@ -515,6 +526,9 @@
   loopInfo = &getAnalysis<MachineLoopInfo>();
   RegClassInfo.runOnMachineFunction(fn);
 
+  tri_->getExtraReservedRegs(extraReservedRegs_);
+  moveReservedRegs_.clear();
+
   // We don't run the coalescer here because we have no reason to
   // interact with it.  If the coalescer requires interaction, it
   // won't do anything.  If it doesn't require interaction, we assume
@@ -536,6 +550,8 @@
 
   linearScan();
 
+  moveReservedRegs();
+
   // Rewrite spill code and update the PhysRegsUsed set.
   rewriter_->runOnMachineFunction(*mf_, *vrm_, li_);
 
@@ -1004,6 +1020,11 @@
         else if (vrm_->isAssignedReg(SrcReg))
           Reg = vrm_->getPhys(SrcReg);
         if (Reg) {
+          if (extraReservedRegs_[Reg]) {
+            moveReservedRegs_[cur] = Reg;
+            restoreRegUses();
+            return;
+          }
           if (SrcSubReg)
             Reg = tri_->getSubReg(Reg, SrcSubReg);
           if (DstSubReg)
diff -ruN old/lib/CodeGen/SelectionDAG/DAGCombiner.cpp new/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
--- old/lib/CodeGen/SelectionDAG/DAGCombiner.cpp	2011-09-23 07:01:29.000000000 +0800
+++ new/lib/CodeGen/SelectionDAG/DAGCombiner.cpp	2013-04-16 22:40:44.857214483 +0800
@@ -53,6 +53,10 @@
     CombinerGlobalAA("combiner-global-alias-analysis", cl::Hidden,
                cl::desc("Include global information in alias analysis"));
 
+  static cl::opt<bool>
+    DisablePrePostIndex("disable-prepost-index", cl::Hidden,
+               cl::desc("Disable pre/post indexed load and store"));
+
 //------------------------------ DAGCombiner ---------------------------------//
 
   class DAGCombiner {
@@ -5867,6 +5871,8 @@
 /// the add / subtract in and all of its other uses are redirected to the
 /// new load / store.
 bool DAGCombiner::CombineToPreIndexedLoadStore(SDNode *N) {
+  if (DisablePrePostIndex)
+    return false;
   if (!LegalOperations)
     return false;
 
@@ -5999,6 +6005,8 @@
 /// load / store effectively and all of its uses are redirected to the
 /// new load / store.
 bool DAGCombiner::CombineToPostIndexedLoadStore(SDNode *N) {
+  if (DisablePrePostIndex)
+    return false;
   if (!LegalOperations)
     return false;
 
diff -ruN old/lib/CodeGen/SelectionDAG/TargetLowering.cpp new/lib/CodeGen/SelectionDAG/TargetLowering.cpp
--- old/lib/CodeGen/SelectionDAG/TargetLowering.cpp	2011-10-14 23:53:48.000000000 +0800
+++ new/lib/CodeGen/SelectionDAG/TargetLowering.cpp	2013-04-16 22:40:44.860214554 +0800
@@ -2305,6 +2305,8 @@
         N0.getOpcode() == ISD::AND)
       if (ConstantSDNode *AndRHS =
                   dyn_cast<ConstantSDNode>(N0.getOperand(1))) {
+        return SDValue();
+#if 0
         EVT ShiftTy = DCI.isBeforeLegalize() ?
           getPointerTy() : getShiftAmountTy(N0.getValueType());
         if (Cond == ISD::SETNE && C1 == 0) {// (X & 8) != 0  -->  (X & 8) >> 3
@@ -2323,6 +2325,7 @@
                                       DAG.getConstant(C1.logBase2(), ShiftTy)));
           }
         }
+#endif
       }
   }
 
diff -ruN old/lib/Target/ARM/ARMBaseInstrInfo.cpp new/lib/Target/ARM/ARMBaseInstrInfo.cpp
--- old/lib/Target/ARM/ARMBaseInstrInfo.cpp	2011-10-12 08:06:23.000000000 +0800
+++ new/lib/Target/ARM/ARMBaseInstrInfo.cpp	2013-04-16 22:40:44.861214575 +0800
@@ -1865,8 +1865,7 @@
       return false;
 
     // Toggle the optional operand to CPSR.
-    MI->getOperand(5).setReg(ARM::CPSR);
-    MI->getOperand(5).setIsDef(true);
+    MI->addOperand(MachineOperand::CreateReg(ARM::CPSR, true, true));
     CmpInstr->eraseFromParent();
     return true;
   }
diff -ruN old/lib/Target/ARM/ARMBaseRegisterInfo.cpp new/lib/Target/ARM/ARMBaseRegisterInfo.cpp
--- old/lib/Target/ARM/ARMBaseRegisterInfo.cpp	2011-10-25 02:08:38.000000000 +0800
+++ new/lib/Target/ARM/ARMBaseRegisterInfo.cpp	2013-04-16 22:40:44.862214589 +0800
@@ -120,9 +120,47 @@
     for (unsigned i = 0; i != 16; ++i)
       Reserved.set(ARM::D16 + i);
   }
+  getExtraReservedRegs(Reserved, false);
   return Reserved;
 }
 
+void ARMBaseRegisterInfo::getExtraReservedRegs(BitVector &Reserved,
+                bool reset) const {
+  if (reset == true)
+    Reserved = BitVector(getNumRegs());
+  for (int i = 0, e = ExtraReservedRegs.size(); i < e; i++)
+    Reserved.set(ExtraReservedRegs[i]);
+}
+
+bool ARMBaseRegisterInfo::setExtraReservedRegs(std::string RegName) {
+#define RESERVE(x) \
+  do { \
+    ExtraReservedRegs.push_back(ARM::R ## x); \
+    return true; \
+  } while(0)
+
+  if (RegName == "r0")  RESERVE(0);
+  if (RegName == "r1")  RESERVE(1);
+  if (RegName == "r2")  RESERVE(2);
+  if (RegName == "r3")  RESERVE(3);
+  if (RegName == "r4")  RESERVE(4);
+  if (RegName == "r5")  RESERVE(5);
+  if (RegName == "r6")  RESERVE(6);
+  if (RegName == "r7")  RESERVE(7);
+  if (RegName == "r8")  RESERVE(8);
+  if (RegName == "r9")  RESERVE(9);
+  if (RegName == "r10") RESERVE(10);
+  if (RegName == "r11") RESERVE(11);
+  if (RegName == "r12") RESERVE(12);
+  return false;
+
+#undef RESERVE
+}
+
+void ARMBaseRegisterInfo::resetExtraReservedRegs() {
+  ExtraReservedRegs.clear();
+}
+
 bool ARMBaseRegisterInfo::isReservedReg(const MachineFunction &MF,
                                         unsigned Reg) const {
   const TargetFrameLowering *TFI = MF.getTarget().getFrameLowering();
diff -ruN old/lib/Target/ARM/ARMBaseRegisterInfo.h new/lib/Target/ARM/ARMBaseRegisterInfo.h
--- old/lib/Target/ARM/ARMBaseRegisterInfo.h	2011-08-30 09:34:54.000000000 +0800
+++ new/lib/Target/ARM/ARMBaseRegisterInfo.h	2013-04-16 22:40:44.863214616 +0800
@@ -98,6 +98,10 @@
 
   BitVector getReservedRegs(const MachineFunction &MF) const;
 
+  void getExtraReservedRegs(BitVector &Reserved, bool reset = true) const;
+  bool setExtraReservedRegs(std::string RegName);
+  void resetExtraReservedRegs();
+
   /// getMatchingSuperRegClass - Return a subclass of the specified register
   /// class A so that each register in it has a sub-register of the
   /// specified sub-register index which is in the specified register class B.
diff -ruN old/lib/Target/ARM/ARMCodeEmitter.cpp new/lib/Target/ARM/ARMCodeEmitter.cpp
--- old/lib/Target/ARM/ARMCodeEmitter.cpp	2011-10-01 16:58:29.000000000 +0800
+++ new/lib/Target/ARM/ARMCodeEmitter.cpp	2013-04-16 22:40:44.864214646 +0800
@@ -56,6 +56,7 @@
     const std::vector<MachineJumpTableEntry> *MJTEs;
     bool IsPIC;
     bool IsThumb;
+    EmittedCodeInfo *ECInfo;
 
     void getAnalysisUsage(AnalysisUsage &AU) const {
       AU.addRequired<MachineModuleInfo>();
@@ -378,6 +379,7 @@
   JTI->Initialize(MF, IsPIC);
   MMI = &getAnalysis<MachineModuleInfo>();
   MCE.setModuleInfo(MMI);
+  ECInfo = &MF.ECInfo;
 
   do {
     DEBUG(errs() << "JITTing function '"
@@ -482,7 +484,7 @@
 void ARMCodeEmitter::
 emitExternalSymbolAddress(const char *ES, unsigned Reloc) const {
   MCE.addRelocation(MachineRelocation::getExtSym(MCE.getCurrentPCOffset(),
-                                                 Reloc, ES));
+                                                 Reloc, ES, 0, 0, false));
 }
 
 /// emitConstPoolAddress - Arrange for the address of an constant pool
@@ -640,12 +642,16 @@
     if (GV) {
       Reloc::Model RelocM = TM.getRelocationModel();
       emitGlobalAddress(GV, ARM::reloc_arm_machine_cp_entry,
+#if 0
                         isa<Function>(GV),
+#endif
+                        false,
                         Subtarget->GVIsIndirectSymbol(GV, RelocM),
                         (intptr_t)ACPV);
     } else  {
       const char *Sym = cast<ARMConstantPoolSymbol>(ACPV)->getSymbol();
       emitExternalSymbolAddress(Sym, ARM::reloc_arm_absolute);
+      ECInfo->ExternalSymbol[MCE.getCurrentPCOffset()] = Sym;
     }
     emitWordLE(0);
   } else {
@@ -1028,7 +1034,7 @@
       Binary |= ((Lo16 >> 12) & 0xF) << 16;
       emitWordLE(Binary);
       return;
-  } else if(MCID.Opcode == ARM::MOVTi16) {
+  } else if(MCID.Opcode == ARM::MOVTi16 && MI.getOperand(OpIdx).isReg() == false) {
       unsigned Hi16 = (getMovi32Value(MI, MI.getOperand(OpIdx),
                        ARM::reloc_arm_movt) >> 16);
       Binary |= Hi16 & 0xFFF;
@@ -1106,7 +1112,8 @@
 
   // If this is an LDRi12, STRi12 or LDRcp, nothing more needs be done.
   if (MI.getOpcode() == ARM::LDRi12 || MI.getOpcode() == ARM::LDRcp ||
-      MI.getOpcode() == ARM::STRi12) {
+      MI.getOpcode() == ARM::STRi12 || MI.getOpcode() == ARM::LDRBi12 ||
+      MI.getOpcode() == ARM::STRBi12) {
     emitWordLE(Binary);
     return;
   }
diff -ruN old/lib/Target/ARM/ARMJITInfo.cpp new/lib/Target/ARM/ARMJITInfo.cpp
--- old/lib/Target/ARM/ARMJITInfo.cpp	2011-02-03 01:29:40.000000000 +0800
+++ new/lib/Target/ARM/ARMJITInfo.cpp	2013-04-16 22:40:44.864214646 +0800
@@ -255,6 +255,8 @@
     assert((!ACPV->hasModifier() && !ACPV->mustAddCurrentAddress()) &&
            "Can't handle this machine constant pool entry yet!");
     intptr_t Addr = (intptr_t)(MR->getResultPointer());
+    if (ACPV->isGlobalValue() && isa<Function>(cast<ARMConstantPoolConstant>(ACPV)->getGV()))
+      return Addr;
     Addr -= getPCLabelAddr(ACPV->getLabelId()) + ACPV->getPCAdjustment();
     return Addr;
   }
diff -ruN old/lib/Target/ARM/ARMTargetMachine.cpp new/lib/Target/ARM/ARMTargetMachine.cpp
--- old/lib/Target/ARM/ARMTargetMachine.cpp	2011-10-11 07:42:08.000000000 +0800
+++ new/lib/Target/ARM/ARMTargetMachine.cpp	2013-04-16 22:40:44.865214674 +0800
@@ -27,6 +27,10 @@
                   cl::desc("Enable global merge pass"),
                   cl::init(true));
 
+static cl::opt<bool>
+DisableExpandPseudo("disable-expand-pseudo", cl::Hidden,
+                  cl::desc("Disable expanding pseudo instructions"));
+
 extern "C" void LLVMInitializeARMTarget() {
   // Register the target.
   RegisterTargetMachine<ARMTargetMachine> X(TheARMTarget);
@@ -130,7 +134,8 @@
 
   // Expand some pseudo instructions into multiple instructions to allow
   // proper scheduling.
-  PM.add(createARMExpandPseudoPass());
+  if (!DisableExpandPseudo)
+    PM.add(createARMExpandPseudoPass());
 
   if (OptLevel != CodeGenOpt::None) {
     if (!Subtarget.isThumb1Only())
diff -ruN old/lib/Target/PowerPC/PPCCodeEmitter.cpp new/lib/Target/PowerPC/PPCCodeEmitter.cpp
--- old/lib/Target/PowerPC/PPCCodeEmitter.cpp	2011-07-26 03:53:23.000000000 +0800
+++ new/lib/Target/PowerPC/PPCCodeEmitter.cpp	2013-04-16 22:40:44.865214674 +0800
@@ -130,6 +130,40 @@
       MovePCtoLROffset = (void*)MCE.getCurrentPCValue();
       MCE.emitWordBE(0x48000005);   // bl 1
       break;
+    case PPC::INLINEASM:
+    case PPC::LDtoc_restore:
+      break;
+    case PPC::LDtoc: {
+      unsigned Value, op;
+      assert(MI.getOperand(1).isGlobal());
+
+      Value = 1006632960U; /* LIS */
+      op = getMachineOpValue(MI, MI.getOperand(0));
+      Value |= (op & 31U) << 21;
+      op = getHA16Encoding(MI, 1);
+      Value |= op & 65535U;
+      MCE.emitWordBE(Value);
+
+      Value = 1610612736U; /* ORI */
+      op = getMachineOpValue(MI, MI.getOperand(0));
+      Value |= (op & 31U) << 16;
+      Value |= (op & 31U) << 21;
+      op = getLO16Encoding(MI, 1);
+      Value |= op & 65535U;
+      MCE.emitWordBE(Value);
+      }
+      break;
+    case PPC::LDinto_toc: {
+      /* ld r2,8(reg) */
+      unsigned Value, op;
+      Value = getBinaryCodeForInstr(MI);
+      Value |= (2 & 31U) << 21;
+      op = getMachineOpValue(MI, MI.getOperand(0));
+      Value |= (op & 31U) << 16;
+      Value |= 8 & 65535U;
+      MCE.emitWordBE(Value);
+      }
+      break;
     }
     MCE.processDebugLoc(MI.getDebugLoc(), false);
   }
@@ -159,7 +193,10 @@
   if (MO.isGlobal())
     return MachineRelocation::getGV(MCE.getCurrentPCOffset(), RelocID,
                                     const_cast<GlobalValue *>(MO.getGlobal()),
-                                    Cst, isa<Function>(MO.getGlobal()));
+#if 0
+                                    Cst, isa<Function>(MO.getGlobal())
+#endif
+                                    Cst, false);
   if (MO.isSymbol())
     return MachineRelocation::getExtSym(MCE.getCurrentPCOffset(),
                                         RelocID, MO.getSymbolName(), Cst);
diff -ruN old/lib/Target/PowerPC/PPCFrameLowering.h new/lib/Target/PowerPC/PPCFrameLowering.h
--- old/lib/Target/PowerPC/PPCFrameLowering.h	2011-07-19 06:29:13.000000000 +0800
+++ new/lib/Target/PowerPC/PPCFrameLowering.h	2013-04-16 22:40:44.866214700 +0800
@@ -27,7 +27,7 @@
 
 public:
   PPCFrameLowering(const PPCSubtarget &sti)
-    : TargetFrameLowering(TargetFrameLowering::StackGrowsDown, 16, 0),
+    : TargetFrameLowering(TargetFrameLowering::StackGrowsUp, 16, 32),
       Subtarget(sti) {
   }
 
diff -ruN old/lib/Target/PowerPC/PPCInstr64Bit.td new/lib/Target/PowerPC/PPCInstr64Bit.td
--- old/lib/Target/PowerPC/PPCInstr64Bit.td	2011-06-03 23:47:49.000000000 +0800
+++ new/lib/Target/PowerPC/PPCInstr64Bit.td	2013-04-16 22:40:44.867214725 +0800
@@ -450,8 +450,8 @@
 
 let isCommutable = 1 in {
 def RLDIMI : MDForm_1<30, 3,
-                      (outs G8RC:$rA), (ins G8RC:$rSi, G8RC:$rS, u6imm:$SH, u6imm:$MB),
-                      "rldimi $rA, $rS, $SH, $MB", IntRotateD,
+                      (outs G8RC:$rA), (ins G8RC:$rSi, G8RC:$rS, u6imm:$sh, u6imm:$MB),
+                      "rldimi $rA, $rS, $sh, $MB", IntRotateD,
                       []>, isPPC64, RegConstraint<"$rSi = $rA">,
                       NoEncode<"$rSi">;
 }
@@ -462,12 +462,12 @@
                       "rldcl $rA, $rS, $rB, $MB", IntRotateD,
                       []>, isPPC64;
 def RLDICL : MDForm_1<30, 0,
-                      (outs G8RC:$rA), (ins G8RC:$rS, u6imm:$SH, u6imm:$MB),
-                      "rldicl $rA, $rS, $SH, $MB", IntRotateD,
+                      (outs G8RC:$rA), (ins G8RC:$rS, u6imm:$sh, u6imm:$MB),
+                      "rldicl $rA, $rS, $sh, $MB", IntRotateD,
                       []>, isPPC64;
 def RLDICR : MDForm_1<30, 1,
-                      (outs G8RC:$rA), (ins G8RC:$rS, u6imm:$SH, u6imm:$ME),
-                      "rldicr $rA, $rS, $SH, $ME", IntRotateD,
+                      (outs G8RC:$rA), (ins G8RC:$rS, u6imm:$sh, u6imm:$ME),
+                      "rldicr $rA, $rS, $sh, $ME", IntRotateD,
                       []>, isPPC64;
 }  // End FXU Operations.
 
diff -ruN old/lib/Target/PowerPC/PPCJITInfo.cpp new/lib/Target/PowerPC/PPCJITInfo.cpp
--- old/lib/Target/PowerPC/PPCJITInfo.cpp	2011-06-15 23:29:47.000000000 +0800
+++ new/lib/Target/PowerPC/PPCJITInfo.cpp	2013-04-16 22:40:44.867214725 +0800
@@ -437,8 +437,10 @@
       if (MR->getRelocationType() == PPC::reloc_absolute_high) {
         // If the low part will have a carry (really a borrow) from the low
         // 16-bits into the high 16, add a bit to borrow from.
+#if 0
         if (((int)ResultPtr << 16) < 0)
           ResultPtr += 1 << 16;
+#endif
         ResultPtr >>= 16;
       }
 
diff -ruN old/lib/Target/PowerPC/PPCRegisterInfo.cpp new/lib/Target/PowerPC/PPCRegisterInfo.cpp
--- old/lib/Target/PowerPC/PPCRegisterInfo.cpp	2011-07-26 03:53:23.000000000 +0800
+++ new/lib/Target/PowerPC/PPCRegisterInfo.cpp	2013-04-16 22:40:44.869214761 +0800
@@ -270,9 +270,68 @@
   if (PPCFI->needsFP(MF))
     Reserved.set(PPC::R31);
 
+  getExtraReservedRegs(Reserved, false);
+
   return Reserved;
 }
 
+void PPCRegisterInfo::getExtraReservedRegs(BitVector &Reserved,
+                bool reset) const {
+  if (reset == true)
+    Reserved = BitVector(getNumRegs());
+  for (int i = 0, e = ExtraReservedRegs.size(); i < e; i++)
+    Reserved.set(ExtraReservedRegs[i]);
+}
+
+bool PPCRegisterInfo::setExtraReservedRegs(std::string RegName) {
+#define RESERVE(x) \
+  do { \
+    ExtraReservedRegs.push_back(PPC::R ## x); \
+    ExtraReservedRegs.push_back(PPC::X ## x); \
+    return true; \
+  } while(0)
+
+  if (RegName == "r0") RESERVE(0);
+  if (RegName == "r1") RESERVE(1);
+  if (RegName == "r2") RESERVE(2);
+  if (RegName == "r3") RESERVE(3);
+  if (RegName == "r4") RESERVE(4);
+  if (RegName == "r5") RESERVE(5);
+  if (RegName == "r6") RESERVE(6);
+  if (RegName == "r7") RESERVE(7);
+  if (RegName == "r8") RESERVE(8);
+  if (RegName == "r9") RESERVE(9);
+  if (RegName == "r10") RESERVE(10);
+  if (RegName == "r11") RESERVE(11);
+  if (RegName == "r12") RESERVE(12);
+  if (RegName == "r13") RESERVE(13);
+  if (RegName == "r14") RESERVE(14);
+  if (RegName == "r15") RESERVE(15);
+  if (RegName == "r16") RESERVE(16);
+  if (RegName == "r17") RESERVE(17);
+  if (RegName == "r18") RESERVE(18);
+  if (RegName == "r19") RESERVE(19);
+  if (RegName == "r20") RESERVE(20);
+  if (RegName == "r21") RESERVE(21);
+  if (RegName == "r22") RESERVE(22);
+  if (RegName == "r23") RESERVE(23);
+  if (RegName == "r24") RESERVE(24);
+  if (RegName == "r25") RESERVE(25);
+  if (RegName == "r26") RESERVE(26);
+  if (RegName == "r27") RESERVE(27);
+  if (RegName == "r28") RESERVE(28);
+  if (RegName == "r29") RESERVE(29);
+  if (RegName == "r30") RESERVE(30);
+  if (RegName == "r31") RESERVE(31);
+  return false;
+
+#undef RESERVE
+}
+
+void PPCRegisterInfo::resetExtraReservedRegs() {
+  ExtraReservedRegs.clear();
+}
+
 //===----------------------------------------------------------------------===//
 // Stack Frame Processing methods
 //===----------------------------------------------------------------------===//
diff -ruN old/lib/Target/PowerPC/PPCRegisterInfo.h new/lib/Target/PowerPC/PPCRegisterInfo.h
--- old/lib/Target/PowerPC/PPCRegisterInfo.h	2011-07-26 03:53:23.000000000 +0800
+++ new/lib/Target/PowerPC/PPCRegisterInfo.h	2013-04-16 22:40:44.869214761 +0800
@@ -42,6 +42,10 @@
 
   BitVector getReservedRegs(const MachineFunction &MF) const;
 
+  void getExtraReservedRegs(BitVector &Reserved, bool reset = true) const;
+  bool setExtraReservedRegs(std::string RegName);
+  void resetExtraReservedRegs();
+
   /// requiresRegisterScavenging - We require a register scavenger.
   /// FIXME (64-bit): Should be inlined.
   bool requiresRegisterScavenging(const MachineFunction &MF) const;
diff -ruN old/lib/Target/X86/X86CodeEmitter.cpp new/lib/Target/X86/X86CodeEmitter.cpp
--- old/lib/Target/X86/X86CodeEmitter.cpp	2011-10-25 04:27:56.000000000 +0800
+++ new/lib/Target/X86/X86CodeEmitter.cpp	2013-04-16 22:41:47.161216906 +0800
@@ -50,6 +50,7 @@
     intptr_t PICBaseOffset;
     bool Is64BitMode;
     bool IsPIC;
+    EmittedCodeInfo *ECInfo;
   public:
     static char ID;
     explicit Emitter(X86TargetMachine &tm, CodeEmitter &mce)
@@ -120,6 +121,7 @@
   TD = TM.getTargetData();
   Is64BitMode = TM.getSubtarget<X86Subtarget>().is64Bit();
   IsPIC = TM.getRelocationModel() == Reloc::PIC_;
+  ECInfo = &MF.ECInfo;
   
   do {
     DEBUG(dbgs() << "JITTing function '" 
@@ -626,6 +628,17 @@
   MCE.processDebugLoc(MI.getDebugLoc(), true);
 
   unsigned Opcode = Desc->Opcode;
+  uintptr_t CurrentPC = MCE.getCurrentPCValue();
+
+  // Emit four ud2 for HQEMU.
+  if (Opcode == X86::TRAP) {
+    for (unsigned i = 0; i < 4; i++) {
+      MCE.emitByte(0x0F);
+      MCE.emitByte(0x0B);
+    }
+    MCE.processDebugLoc(MI.getDebugLoc(), false);
+    return;
+  }
 
   // Emit the lock opcode prefix as needed.
   if (Desc->TSFlags & X86II::LOCK)
@@ -843,8 +856,11 @@
                         Indirect);
     } else if (MO1.isSymbol())
       emitExternalSymbolAddress(MO1.getSymbolName(), rt);
-    else if (MO1.isCPI())
+    else if (MO1.isCPI()) {
       emitConstPoolAddress(MO1.getIndex(), rt);
+      ECInfo->ConstantPoolEntry[CurrentPC] =
+              MCE.getConstantPoolEntryAddress(MO1.getIndex());
+    }
     else if (MO1.isJTI())
       emitJumpTableAddress(MO1.getIndex(), rt);
     break;
diff -ruN old/lib/Target/X86/X86RegisterInfo.cpp new/lib/Target/X86/X86RegisterInfo.cpp
--- old/lib/Target/X86/X86RegisterInfo.cpp	2011-10-09 04:20:03.000000000 +0800
+++ new/lib/Target/X86/X86RegisterInfo.cpp	2013-04-16 22:40:44.871214783 +0800
@@ -442,10 +442,67 @@
         Reserved.set(Reg);
     }
   }
+  getExtraReservedRegs(Reserved, false);
 
   return Reserved;
 }
 
+void X86RegisterInfo::getExtraReservedRegs(BitVector &Reserved,
+                bool reset) const {
+  if (reset == true)
+    Reserved = BitVector(getNumRegs());
+  for (int i = 0, e = ExtraReservedRegs.size(); i < e; i++)
+    Reserved.set(ExtraReservedRegs[i]);
+}
+
+bool X86RegisterInfo::setExtraReservedRegs(std::string RegName) {
+#define RESERVE1(x) \
+  do { \
+    ExtraReservedRegs.push_back(X86::x ## L); \
+    ExtraReservedRegs.push_back(X86::x ## H); \
+    ExtraReservedRegs.push_back(X86::x ## X);\
+    ExtraReservedRegs.push_back(X86::E ## x ## X);\
+    ExtraReservedRegs.push_back(X86::R ## x ## X);\
+    return true; \
+  } while(0)
+
+#define RESERVE2(x) \
+  do { \
+    ExtraReservedRegs.push_back(X86::R ## x); \
+    ExtraReservedRegs.push_back(X86::R ## x ## B);\
+    ExtraReservedRegs.push_back(X86::R ## x ## D);\
+    ExtraReservedRegs.push_back(X86::R ## x ## W);\
+    return true; \
+  } while(0)
+
+  if (RegName == "ebp") {
+    ExtraReservedRegs.push_back(X86::EBP);
+    return true;
+  }
+#if defined(__x86_64__)
+  if (RegName == "rax") RESERVE1(A);
+  if (RegName == "rbx") RESERVE1(B);
+  if (RegName == "rcx") RESERVE1(C);
+  if (RegName == "rdx") RESERVE1(D);
+  if (RegName == "r8")  RESERVE2(8);
+  if (RegName == "r9")  RESERVE2(9);
+  if (RegName == "r10") RESERVE2(10);
+  if (RegName == "r11") RESERVE2(11);
+  if (RegName == "r12") RESERVE2(12);
+  if (RegName == "r13") RESERVE2(13);
+  if (RegName == "r14") RESERVE2(14);
+  if (RegName == "r15") RESERVE2(15);
+#endif
+  return false;
+
+#undef RESERVE1
+#undef RESERVE2
+}
+
+void X86RegisterInfo::resetExtraReservedRegs() {
+  ExtraReservedRegs.clear();
+}
+
 //===----------------------------------------------------------------------===//
 // Stack Frame Processing methods
 //===----------------------------------------------------------------------===//
diff -ruN old/lib/Target/X86/X86RegisterInfo.h new/lib/Target/X86/X86RegisterInfo.h
--- old/lib/Target/X86/X86RegisterInfo.h	2011-10-06 04:26:33.000000000 +0800
+++ new/lib/Target/X86/X86RegisterInfo.h	2013-04-16 22:40:44.871214783 +0800
@@ -103,6 +103,10 @@
   /// register scavenger to determine what registers are free.
   BitVector getReservedRegs(const MachineFunction &MF) const;
 
+  void getExtraReservedRegs(BitVector &Reserved, bool reset = true) const;
+  bool setExtraReservedRegs(std::string RegName);
+  void resetExtraReservedRegs();
+
   bool canRealignStack(const MachineFunction &MF) const;
 
   bool needsStackRealignment(const MachineFunction &MF) const;
diff -ruN old/lib/Transforms/InstCombine/InstCombineCasts.cpp new/lib/Transforms/InstCombine/InstCombineCasts.cpp
--- old/lib/Transforms/InstCombine/InstCombineCasts.cpp	2011-09-28 04:39:19.000000000 +0800
+++ new/lib/Transforms/InstCombine/InstCombineCasts.cpp	2013-04-16 22:40:44.872214799 +0800
@@ -15,9 +15,13 @@
 #include "llvm/Analysis/ConstantFolding.h"
 #include "llvm/Target/TargetData.h"
 #include "llvm/Support/PatternMatch.h"
+#include "llvm/Support/CommandLine.h"
 using namespace llvm;
 using namespace PatternMatch;
 
+static cl::opt<bool> DisableBCVector("disable-bc-vector", cl::Hidden,
+    cl::desc("Disable bitcast to/from VectorType"));
+
 /// DecomposeSimpleLinearExpr - Analyze 'Val', seeing if it is a simple linear
 /// expression.  If so, decompose it, returning some value X, such that Val is
 /// X*Scale+Offset.
@@ -1700,6 +1704,12 @@
     if (Instruction *I = OptimizeIntToFloatBitCast(CI, *this))
       return I;
 
+  if (DisableBCVector == true) {
+    if (SrcTy->isPointerTy())
+      return commonPointerCastTransforms(CI);
+    return commonCastTransforms(CI);
+  }
+
   if (VectorType *DestVTy = dyn_cast<VectorType>(DestTy)) {
     if (DestVTy->getNumElements() == 1 && !SrcTy->isVectorTy()) {
       Value *Elem = Builder->CreateBitCast(Src, DestVTy->getElementType());
